[/
 / Copyright 2013 OptionMetrics, Inc.
 / Copyright 2013 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library QuickCheckCpp
    [quickbook 1.3]
    [authors [Niebler, Eric]]
    [copyright 2013 Eric Niebler]
    [category testing]
    [id quick_check]
    [dirname quick_check]
    [purpose
        Quickly test your algorithms by automatically generating
        input and verifying properties of the output.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]

[/ Substitutions ]

[def __qchk__               QuickCheckCpp]
[def __note__               [$images/note.png]]
[def __alert__              [$images/caution.png]]
[def __detail__             [$images/note.png]]
[def __tip__                [$images/tip.png]]
[def __qcheck__             [^[funcref quick_check::qcheck()]]]
[def __classify__           [^[funcref quick_check::classify()]]]
[def __group_by__           [^[funcref quick_check::group_by()]]]
[def __make_config__        [^[funcref quick_check::make_config()]]]
[def __alnum__              [^[funcref quick_check::alnum()]]]
[def __alpha__              [^[funcref quick_check::alpha()]]]
[def __cntrl__              [^[funcref quick_check::cntrl()]]]
[def __digit__              [^[funcref quick_check::digit()]]]
[def __graph__              [^[funcref quick_check::graph()]]]
[def __lower__              [^[funcref quick_check::lower()]]]
[def __print__              [^[funcref quick_check::print()]]]
[def __punct__              [^[funcref quick_check::punct()]]]
[def __space__              [^[funcref quick_check::space()]]]
[def __upper__              [^[funcref quick_check::upper()]]]
[def __xdigit__             [^[funcref quick_check::xdigit()]]]
[def __string__             [^[funcref quick_check::string()]]]
[def __wstring__            [^[funcref quick_check::wstring()]]]
[def __vector__             [^[funcref quick_check::vector()]]]
[def __ordered_vector__     [^[funcref quick_check::ordered_vector()]]]
[def __sequence__           [^[funcref quick_check::sequence()]]]
[def __ordered_sequence__   [^[funcref quick_check::ordered_sequence()]]]
[def __grouped_by__         [^[classref quick_check::grouped_by<>]]]
[def __property__           [^[classref quick_check::property<>]]]
[def __uniform__            [^[classref quick_check::uniform<>]]]
[def __normal__             [^[classref quick_check::normal<>]]]

[/ Imports ]

[import ../example/simple.cpp]
[import ../example/complex.cpp]
[import ../example/bind.cpp]
[import ../example/classifiers.cpp]
[import ../example/group_by.cpp]
[import ../example/condition.cpp]

[section:users_guide Users' Guide]

This section describes how to use __qchk__ to quickly sanity-check your algorithms. If you are looking for detailed information regarding specific components in __qchk__, check the [link quick_check.reference Reference] section.

[section:preface Preface]

__qchk__ is a library for [@http://en.wikipedia.org/wiki/Ad_hoc_testing ad hoc software testing]. With __qchk__, you define /properties/ of your algorithm -- predicates that must be true -- and __qchk__ does the rest, automatically generating random input data and validating that the properties hold. __qchk__ is good for quickly getting broad test coverage of your algorithms and for testing how your code behaves with unexpected input.

[warning Since __qchk__ cannot know your code's important boundary cases, it is /not/ a complete replacement for hand-crafted unit tests.]

[endsect] [/ Preface]

[section:quick_start Quick Start]

Below are some simple examples to get you started quickly using __qchk__.

[heading A simple example]

The following is the most very basic example of __qchk__. It shows a very simple property being tested, with __qchk__ picking all the defaults for us.

[SimpleExample]

The above code displays:

[pre
OK, passed 100 tests.
]

[heading A more complicated example]

The following example shows most of the features of __qchk__. It uses a custom random number generator; a normal and a uniform distribution for input; user-specified configuration parameters; and a property with classifiers, grouping, and a condition.

[ComplexExample]

The above code displays:

[pre
Arguments exhausted after 7382 tests.
17% 0, bar.
17% 0, foo.
16% 1, bar.
17% 1, foo.
16% 2, bar.
16% 2, foo.
]

The __qcheck__ algorithm very much wants to execute 10,000 tests. As it turns out, only 7,382 tests satisfy the property's condition (`_2 > 0`) before the maximum number of generated tests (15,000) is reached. The result summary shows the breakdown of the generated input arguments. For instance, for 17% of the generated test cases, `_1 % 3` is 0 and `_1 <= 3` is true. We can use the summary information to reassure ourselves that we're getting the test coverage we were expecting.

[endsect] [/ Quick Start]

[section:properties Defining Properties]

This section describes how to define the properties that will be checked by the __qcheck__ algorithm.

[section:simple Simple Properties]

At its simplest, a __qchk__ property is just a Boolean [@http://www.boost.org/libs/phoenix Phoenix] lambda function. So, for instance, this is a valid __qchk__ property:

    using namespace quick_check;
    auto my_property = _1 + _2 == _2 + _1;

The above property checks that adding the second argument to the first is the same as adding the first argument to the second. This will be true for numbers, but not strings, for instance. For convenience, the Phoenix argument placeholders (`_1`, `_2`, etc.) have been imported into the `quick_check` namespace.

[endsect] [/ Simple Properties]

[section:functions Calling User-Defined Functions]

Very few interesting properties can be definied entirely with Phoenix primitives. It's often necessary to put some of the property definition in an ordinary C++ function that then gets called from Phoenix. Imagine we have a function like the following:

    namespace my_library
    {
        template<typename A, typename B>
        bool is_reflexive(A a, B b)
        {
            return (a + b) == (b + a);
        }
    }

We want to turn this (rather uninteresting) algorithm into a property we can test with __qcheck__. Ideally, we would just do this:

    // ERROR: DON'T DO THIS. It does not work.
    auto is_reflex_prop = my_library::is_reflexive(_1, _2);

The problem is that the `is_reflexive` function template cannot handle being passed argument placeholders. This code will fail to compile. Fortunately, the Boost.Phoenix library provides an easy solution: [@http://www.boost.org/libs/phoenix/doc/html/phoenix/starter_kit/lazy_functions.html `boost::phoenix::function`].

Here is an example:

[BindExample]

To call some function `my_library::is_reflexive` from a property, first we define a [@http://www.boost.org/doc/libs/release/libs/fusion/doc/html/fusion/functional/concepts/poly.html function object] `is_reflexive_impl`, which does nothing more than call `my_library::is_reflexive`. Then, we use `quick_check::function` (which is an alias for `boost::phoenix::function`) to turn the function object into a lazy function named `lazy::is_reflexive`. Lazy functions are functions that know how to handle argument placeholders. Once that's done, we can use `lazy::is_reflexive` in our properties in place of `my_library::is_reflexive`.

[endsect] [/ Calling User-Defined Functions]

[section:classify Classifying Input]

Since __qchk__ automatically generates input for you, you don't normally get a chance to examine the input. If you are the kind to lie awake at night wondering whether your code is getting tested with an appropriately broad set of inputs, then __qchk__ classifiers are for you. With classifiers, you can get feedback about the kind of input your code is being tested with. For instance, you may want to know that your algorithm is being tested with negative numbers in addition to positive ones. You could define your property with the __classify__ function, as follows:

[ClassifierExample]

If we test this property with some standard generators, we get the following output:

[pre
OK, passed 100 tests.
58% non-positive.
42% positive.
]

Whew! We're getting the coverage we expected.

It's possible for a set of input parameters to satisfy more than one classifier. In that case, the summary reports how many are in one class, how many are in the other, and how many are in both.

Input classification may be used in conjunction with input [link quick_check.users_guide.properties.group_by grouping] (described next).

[endsect] [/ Classifying Input]

[section:group_by Grouping Input]

In the [link quick_check.users_guide.properties.classify ["Classifying Input]] section, we saw one way of collecting statistics about the input to our properties. The __group_by__ primitive gives us another way. Say, for instance, we want to group input according to the modulus of the first argument with 3. We can do that easily as follows:

[GroupByExample]

If we test this property with some standard generators, we get the following output:

[pre
OK, passed 100 tests.
39% 0.
34% 1.
27% 2.
]

The test summary shows that the input is fairly evenly divided into thirds by the group-by condition.

A property may have only one `group_by` clause. `group_by` may be used in conjunction with [link quick_check.users_guide.properties.classify classifiers]. If so, the `group_by` clause must preceed the classifiers.

[endsect] [/ Grouping Input]

[section:conditional Conditional Evaluation]

Sometimes we want to test an algorithm that requires something of its input. For instance, if we were testing a square root algorithm, we wouldn't want to test it with negative numbers. We can use a Boolean predicate together with __qchk__'s `>>=` operator to guard our property. By guarding the property, we prevent it from ever running on bogus input. Consider the following:

[ConditionExample]

It's wrong to call `std::sqrt` with a negative number, so we have guarded our test with `(_1 > 0) >>=`. Did we write this test correctly? Let's see:

[pre
Falsifiable, after 111 tests:
[2.08687\]
]

Whoops! Our test is bogus. __qchk__ disabuses us of our naive notions about the behavior of floating point numbers. Squaring the result of `std::sqrt` doesn't quite get us back where we started, or even within `DBL_EPSILON` of where we started. The first input that caused our test to fail was `2.08687`. Thank you, __qchk__. Clearly, we need to be smarter about how to test floating point algorithms.

[endsect] [/ Conditional Evaluation]

[section:property The [^property] Object]

In all the examples we've seen before, we've stored the property in an `auto` local object. There are cases when it's not possible or desirable to use `auto`; for instance, what if you wanted to store a property in a data member? In those cases, it's convenient to have a type that can hold a property. That type is __property__.

`property<>` is a template. The template parameters are the types of the property's arguments. For instance:

    normal<double> one(0.0, 1.0);
    uniform<int> die(1, 6);

    // The first argument is an int, the second is a double
    auto config = make_config(_1 = die, _2 = one);

    // OK, the first argument is an int, the second is a double
    property<int, double> prop = ((_1+_2)==(_2+_1));

If you use __group_by__ to group your input parameters, then you need to add an extra template parameter to `property<>`: an instance of __grouped_by__. For insance:

    normal<double> one(0.0, 1.0);
    uniform<int> die(1, 6);

    // The first argument is an int, the second is a double
    auto config = make_config(_1 = die, _2 = one);

    // OK, the first argument is an int, the second is a double,
    // and the input will be grouped by integer.
    property<int, double, grouped_by<int> > prop =
        group_by(_1 % 3)
          | ((_1+_2)==(_2+_1));

Since `_1` will receive integers, `_1 % 3` will also be an `int`, so that is the type of the input grouping. We signify that by parameterizing `property<>` with `grouped_by<int>`. If you use `grouped_by<>`, it must always be the last template parameter to `property<>`.

[endsect] [/ The `property` object]

[endsect] [/ Defining Properties]

[section:config Test Configuration]

This section describes how to configure your tests. It covers the input generators and the __make_config__ function, which associates generators with argument placeholders and collects other assorted configuration parameters into an object that you can pass to the __qcheck__ algorithm.

[section:generators Generating Input]

Probably the most important job of __qchk__ is to automatically generate input for your tests. That's the job ob __qchk__'s /generators/. __qchk__ provides standard generators for the primitive types as well as ways to generate sequences and objects of class type. It is also very simple to define your own generators.

[tip __qchk__'s generators are designed to work together with [@http://www.boost.org/libs/random Boost.Random] as a source of random numbers. For those familiar with that library, or with the random number facilities in C++11 based on it, you can think of __qchk__'s generators as similar in purpose to that library's [@http://www.boost.org/doc/libs/1_54_0/doc/html/boost_random/reference.html#boost_random.reference.distributions distributions].]

[section:primitive_types Primitive Types]

If your arguments are primitive types like integers, floating point numbers, or characters, you can probably just use one of __qchk__'s built-in generators. They are described below.

[heading Floating-Point Generators]

When generating random floating-point data, you have the choice of either a uniform or a normal distribution. For a normal distribution, use __normal__, as follows:

    // generate a normal distribution of doubles.
    normal<double> one(0.0, 1.0);

The constructor arguments to `normal<>` are the mean and the standard deviation. The standard deviation must be greater than zero.

To generate a uniform distribution of floating-point numbers, use __uniform__ as follows:

    // generate a uniform distribution of doubles.
    uniform<double> one(-1.0, 1.0);

The constructor arguments are the minimum and maximum values the resulting data may have.

[note The constructor parameters to `uniform<>` and `normal<>` are semantically different!]

[heading Integral Generators]

There is no generator for a normal distribution of integral data. Instead, use __uniform__, just as for floating point data. This, for instance, create a data sequence representing the rolls of a 6-sided die:

    // Generate a uniform sequence of integers representing rolls
    // of a 6-sided die
    uniform<int> die(1, 6);

The constructor parameters represent the minimum and maximum values the data may have.

[heading Character Generators]

Since character types are integral types, you may use __uniform__ to generate a uniform distribution of characters. That's often unsatisfactory, since it is likely to generate things like control characters and punctuation, which you may not want. Instead, __qchk__ provides character generators corresponding to the standard POSIX character type classes. The table below describes them.

[table Built-In Character Generators
[[Generator][Meaning]]
[[`auto gen = __alnum__;`][A uniform distribution of characters for which `std::isalnum()` is true.]]
[[`auto gen = __alpha__;`][A uniform distribution of characters for which `std::isalpha()` is true.]]
[[`auto gen = __cntrl__;`][A uniform distribution of characters for which `std::iscntrl()` is true.]]
[[`auto gen = __digit__;`][A uniform distribution of characters for which `std::isdigit()` is true.]]
[[`auto gen = __graph__;`][A uniform distribution of characters for which `std::isgraph()` is true.]]
[[`auto gen = __lower__;`][A uniform distribution of characters for which `std::islower()` is true.]]
[[`auto gen = __print__;`][A uniform distribution of characters for which `std::isprint()` is true.]]
[[`auto gen = __punct__;`][A uniform distribution of characters for which `std::ispunct()` is true.]]
[[`auto gen = __space__;`][A uniform distribution of characters for which `std::isspace()` is true.]]
[[`auto gen = __upper__;`][A uniform distribution of characters for which `std::isupper()` is true.]]
[[`auto gen = __xdigit__;`][A uniform distribution of characters for which `std::isxdigit()` is true.]]
]

The character generators are most often used in conjunction with the __string__ generator, described below.

[heading Built-In Arrays]

The __normal__ and __uniform__ templates let you generate built-in arrays of their element types. Just parameterize them with an array type, as follows:

    // A generator for an 2-element array of ints
    // representing the roll of 2 six-sided die.
    uniform<int[2]> die(1, 6);

Within properties, arrays can be used in arithmetic expressions. If the property contains the expression `_1 + _2`, and `_1` and `_2` are bound to arrays, then the addition is element-wise. The arrays must have the same number of elements. Equality and inequality are also element-wise.

When using relational operators on arrays, the result is a lexicographic comparison. For instance, the expression `_1 < _2` with arrays is equivalent to an invocation of `std::lexicographic_compare`.

[endsect] [/ Primitive Types]

[section:sequences Ordered and Unordered Sequences]

It's very handy to be able to generate sequences and evaluate properties with them. Perhaps you're testing a string algorithm. You need to be able to generate a bunch of random `std::string`s. No problem. Here's how.

[heading Generating `std::vector`]

If you want to generate `std::vector`s, you can use the __vector__ function to create a generator for vectors.

    // Generates a uniform distribution of ints from 1 to 6.
    uniform<int> die(1,6);
    // Generates vectors of integers using die.
    auto vec_gen = quick_check::vector(die);

Now, when `vec_gen` is invoked with a random number generator, it returns a `std::vector` with randomly generated integers between 1 and 6 inclusive.

If you would like your vectors to be sorted, you can use __ordered_vector__ instead.

[heading Generating `std::string`]

Likewise, you can use __string__ to generate `std::string`s:

    // Generate random alpha-numeric characters:
    auto char_gen = quick_check::alnum();
    // Generate std::strings using char_gen:
    auto string_gen = quick_check::string(char_gen);

When invoked with a character generator like above, `quick_check::string()` generates instances of `std::basic_string<Ch>`, where `Ch` is the result type of the character generator. `quick_check::string()` can also be invoked without a character generator, in which case, it uses a default-constructed [^[classref quick_check::uniform<char>]] as the character generator. Similarly, there is a function __wstring__ that generates `std::wstring` objects. It uses `uniform<wchar_t>` to generate wide characters.

[heading Other Sequence Types]

If you want to generate a sequences type other than `std::vector` or `std::string`, you can use the more general-purpose __sequence__ and __ordered_sequence__. These require you to specify the sequence type as a template parameter.

    // Generate std::list<int> objects
    uniform<int> die(0,6);
    auto list_gen = sequence< list<int> >(die);

To use either __sequence__ or __ordered_sequence__, the sequence type must have a `push_back()` member function. To use __ordered_sequence__, the sequence type must have random-access iterators.

[heading Sequence Length]

The obvious question is: what is the length of the generated sequences? The issue is discussed in more detail in the reference for [^[globalref quick_check::_sized]], but the short answer is that by default, sequences are between 0 and 50 elements, inclusive. If you would like to change the upper limit, you can use [^[globalref quick_check::_sized]] together with __make_config__.

For instance, the following line creates a configuration where all the generated strings are between 0 and 10 characters long:

    // Make a config that generates strings with a maximum size of 10.
    auto conf = make_config(_1 = string(), _sized = 10u);

The distribution of sequence lengths is uniform.

[endsect] [/ Ordered and Unordered Sequences]

[section:class_types User-Defined Types]

TODO

[endsect] [/ User-Defined Types]

[section:user_defined_generators Defining Your Own Generator]

TODO

[endsect] [/ Defining Your Own Generator]

[endsect] [/ Generating Input]

[section:config_params Configuration Paramters]

TODO Describe _rng, _test_count, _max_test_count, and _sized.

[endsect] [/ Configuration Paramters]

[endsect] [/ Test Configuration]

[section:qcheck Running The Tests]

TODO

[section:qcheck The [^qcheck] Algorithm]

TODO

[endsect] [/The [^qcheck] Algorithm]

[section:qcheck Examining The Results]

TODO

[endsect] [/Examining The Results]

[endsect] [/Running The Tests]

[endsect] [/ Users' Guide]

[xinclude autodoc.xml]
